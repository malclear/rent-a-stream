// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace DataModel
{
	public static partial class ProjectionsSchema
	{
		public partial class DataContext
		{
			private readonly IDataContext _dataContext;

			public ITable<Account>      Accounts      => _dataContext.GetTable<Account>();
			public ITable<UserMovie>    UserMovies    => _dataContext.GetTable<UserMovie>();
			public ITable<AppUser>         Users         => _dataContext.GetTable<AppUser>();
			public ITable<UserPurchase> UserPurchases => _dataContext.GetTable<UserPurchase>();

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		#region Table Extensions
		public static Account? Find(this ITable<Account> table, Guid id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Account?> FindAsync(this ITable<Account> table, Guid id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static UserMovie? Find(this ITable<UserMovie> table, Guid userId, string movieCode)
		{
			return table.FirstOrDefault(e => e.UserId == userId && e.MovieCode == movieCode);
		}

		public static Task<UserMovie?> FindAsync(this ITable<UserMovie> table, Guid userId, string movieCode, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.UserId == userId && e.MovieCode == movieCode, cancellationToken);
		}

		public static AppUser? Find(this ITable<AppUser> table, Guid id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AppUser?> FindAsync(this ITable<AppUser> table, Guid id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static UserPurchase? Find(this ITable<UserPurchase> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<UserPurchase?> FindAsync(this ITable<UserPurchase> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}
		#endregion

		[Table("account", Schema = "projections")]
		public class Account
		{
			[Column("id"     , IsPrimaryKey = true)] public Guid     Id      { get; set; } // uuid
			[Column("balance"                     )] public decimal? Balance { get; set; } // numeric
		}

		[Table("user_movie", Schema = "projections")]
		public class UserMovie
		{
			[Column("user_id"     , IsPrimaryKey = true , PrimaryKeyOrder = 0                        )] public Guid            UserId      { get; set; } // uuid
			[Column("movie_code"  , CanBeNull    = false, IsPrimaryKey    = true, PrimaryKeyOrder = 1)] public string          MovieCode   { get; set; } = null!; // character varying
			[Column("license_type", CanBeNull    = false                                             )] public string          LicenseType { get; set; } = null!; // character varying
			[Column("valid_until"                                                                    )] public DateTimeOffset? ValidUntil  { get; set; } // timestamp (6) with time zone
		}

		[Table("user", Schema = "projections")]
		public class AppUser
		{
			[Column("id"      , IsPrimaryKey = true )] public Guid   Id       { get; set; } // uuid
			[Column("name"    , CanBeNull    = false)] public string Name     { get; set; } = null!; // character varying
			[Column("username", CanBeNull    = false)] public string Username { get; set; } = null!; // character varying
		}

		[Table("user_purchase", Schema = "projections")]
		public class UserPurchase
		{
			[Column("id"                   , IsPrimaryKey = true , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int            Id                   { get; set; } // integer
			[Column("user_id"                                                                                                 )] public Guid           UserId               { get; set; } // uuid
			[Column("movie_code"           , CanBeNull    = false                                                             )] public string         MovieCode            { get; set; } = null!; // character varying
			[Column("transaction_timestamp"                                                                                   )] public DateTimeOffset TransactionTimestamp { get; set; } // timestamp (6) with time zone
			[Column("license_type"         , CanBeNull    = false                                                             )] public string         LicenseType          { get; set; } = null!; // character varying
			[Column("price"                                                                                                   )] public decimal        Price                { get; set; } // numeric
		}
	}
}
