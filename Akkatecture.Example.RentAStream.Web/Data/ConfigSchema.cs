// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace DataModel
{
	public static partial class ConfigSchema
	{
		public partial class DataContext
		{
			private readonly IDataContext _dataContext;

			public ITable<CatalogListing> CatalogListings => _dataContext.GetTable<CatalogListing>();

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		#region Table Extensions
		public static CatalogListing? Find(this ITable<CatalogListing> table, string movieCode)
		{
			return table.FirstOrDefault(e => e.MovieCode == movieCode);
		}

		public static Task<CatalogListing?> FindAsync(this ITable<CatalogListing> table, string movieCode, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.MovieCode == movieCode, cancellationToken);
		}
		#endregion

		[Table("catalog_listing", Schema = "config")]
		public class CatalogListing
		{
			[Column("movie_code"       , CanBeNull = false, IsPrimaryKey = true)] public string  MovieCode        { get; set; } = null!; // character varying
			[Column("movie_title"      , CanBeNull = false                     )] public string  MovieTitle       { get; set; } = null!; // character varying
			[Column("poster_image"                                             )] public string? PosterImage      { get; set; } // character varying
			[Column("short_description"                                        )] public string? ShortDescription { get; set; } // character varying
		}
	}
}
